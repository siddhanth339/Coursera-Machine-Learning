function [C, sigma] = dataset3Params(X, y, Xval, yval)
%DATASET3PARAMS returns your choice of C and sigma for Part 3 of the exercise
%where you select the optimal (C, sigma) learning parameters to use for SVM
%with RBF kernel
%   [C, sigma] = DATASET3PARAMS(X, y, Xval, yval) returns your choice of C and 
%   sigma. You should complete this function to return the optimal C and 
%   sigma based on a cross-validation set.
%

% You need to return the following variables correctly.



% ====================== YOUR CODE HERE ======================
% Instructions: Fill in this function to return the optimal C and sigma
%               learning parameters found using the cross validation set.
%               You can use svmPredict to predict the labels on the cross
%               validation set. For example, 
%                   predictions = svmPredict(model, Xval);
%               will return the predictions on the cross validation set.
%
%  Note: You can compute the prediction error using 
%        mean(double(predictions ~= yval))
%
min = 9999999;
cvals = [0.01; 0.03; 0.1; 0.3; 1; 3; 10; 30];
sigvals = [0.01; 0.03; 0.1; 0.3; 1; 3; 10; 30];
for i = 1:8
  for j = 1:8
    model= svmTrain(X, y, cvals(i), @(x1, x2) gaussianKernel(x1, x2, sigvals(j)));
    predictions = svmPredict(model, Xval);
    
   if(mean(double(predictions ~= yval)) < min)
      %fprintf("C = %f\n", cvals(i));
      %fprintf("Sigma = %f\n", sigvals(j));
      %fprintf("Error = %f\n", mean(double(predictions ~= yval)));
      %visualizeBoundary(X, y, model);
      %fprintf('Program paused. Press enter to continue.\n');
      %pause;
      min = mean(double(predictions ~= yval));
      C = cvals(i);
      sigma = sigvals(j);
      
    endif
  endfor
  
endfor





% =========================================================================

end
